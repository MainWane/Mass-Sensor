#include <Wire.h>
#include <Adafruit_INA219.h>

Adafruit_INA219 ina219;

#define BUTTON_PIN 4 // GIOP33 pin connected to button
const int relayPin = 27;
const int yellowLEDPin = 35;
const int redLEDPin = 32;

const unsigned long sampleInterval = 1000;  // 1 sekund
const unsigned long printInterval = 10000;  // 10 sekunder
const int avgSamples = 10;

unsigned long lastSampleTime = 0;
unsigned long lastPrintTime = 0;

float energy_Wh = 0.0;

float voltageSum = 0.0;
float currentSum = 0.0;
int sampleCount = 0;

float lastAvgPower = 0.0;
float lastAvgCurrent = 0.0;

bool emergencyShutdown = false;

void setup() {
  Serial.begin(9600);
  Wire.begin();

  if (!ina219.begin()) {
    Serial.println("INA219 ikke fundet. Check forbindelser.");
    while (1);
  }

  pinMode(relayPin, OUTPUT);
  pinMode(yellowLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);

  digitalWrite(relayPin, LOW); // start med relæet tændt
  digitalWrite(yellowLEDPin, LOW);
  digitalWrite(redLEDPin, LOW);
}

void loop() {
  unsigned long currentMillis = millis();

  if (currentMillis - lastSampleTime >= sampleInterval) {
    lastSampleTime = currentMillis;

    float voltage = ina219.getBusVoltage_V();
    float current = ina219.getCurrent_mA() / 1000.0; // A

    voltageSum += voltage;
    currentSum += current;
    sampleCount++;

    if (sampleCount >= avgSamples) {
      float avgVoltage = voltageSum / sampleCount;
      float avgCurrent = currentSum / sampleCount;
      lastAvgPower = avgVoltage * avgCurrent;
      lastAvgCurrent = avgCurrent;

      float periodHours = (sampleInterval * avgSamples) / 3600000.0;
      energy_Wh += lastAvgPower * periodHours;

      voltageSum = 0.0;
      currentSum = 0.0;
      sampleCount = 0;

      // Advarsels- og nødstoplogik
      if (avgCurrent > 1.5) {
        emergencyShutdown = true;
        Serial.println("!!! NØDSTOP AKTIVERET: Strøm > 1.5A");
      }
    }
  }

  if (currentMillis - lastPrintTime >= printInterval) {
    lastPrintTime = currentMillis;

    Serial.print("Effekt (W): ");
    Serial.print(lastAvgPower, 4);
    Serial.print(" | Energi (kWh): ");
    Serial.print(energy_Wh / 1000.0, 6);
    Serial.print(" | Strøm (A): ");
    Serial.println(lastAvgCurrent, 4);
  }

  int buttonState = digitalRead(BUTTON_PIN);

  // print out the button's state
  Serial.println(buttonState);

  // hvis knappen er trykket (HIGH), slå relæet til
  if (buttonState == LOW) {
    digitalWrite(relayPin, LOW);
  } else {
    digitalWrite(relayPin, HIGH);
  }

  // LED og relæ styring
  if (emergencyShutdown) {
    digitalWrite(relayPin, LOW);           // Sluk relæ
    digitalWrite(redLEDPin, HIGH);         // Tænd rød LED
    digitalWrite(yellowLEDPin, LOW);       // Gul LED irrelevant
  } else {
    digitalWrite(relayPin, HIGH);          // Hold relæ tændt
    digitalWrite(redLEDPin, lastAvgCurrent > 1.2 ? HIGH : LOW);
    digitalWrite(yellowLEDPin, lastAvgCurrent > 0.7 ? HIGH : LOW);
  }
}
